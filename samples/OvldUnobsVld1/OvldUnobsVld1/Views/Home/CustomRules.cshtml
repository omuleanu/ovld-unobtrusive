@model CustomRulesInput
@{
    ViewData["Title"] = "Custom Rules";
}

<div class="text-center">
    <h1 class="display-5">Custom Rules</h1>
</div>

<div id="f1">
    @using (Html.BeginForm())
    {
        <div>`asdf` not allowed for Name</div>
        @Html.EditorFor(o => o.Name)
        <div>Name1 must equal Name, the validation message will toggle by modifying either Name or Name1</div>
        @Html.EditorFor(o => o.Name1)
        @Html.EditorFor(o => o.NumA)
        @Html.EditorFor(o => o.NumB)
        @Html.EditorFor(o => o.NumC)

        <div class="esubmit">
            <input type="submit" value="submit" />
        </div>
    }
</div>
<br />
<button type="button" id="bind1" onclick="toggleBindVld()">bind/unbind validation</button>
<button type="button" id="vld1" onclick="validateForm()">api validate</button>

<div id="log"></div>
@section scripts {
    <script>
        const {find, addClass, remClass} = ovld.core;

        ovld.unobtrusive.setDefaults({ autorun: false });

        let rules = {
            Name: [{chk: noAsdf, msg:'Name can\'t contain asdf'}],
            Name1:[{chk: sameAsName, msg: 'Name1 doesn\'t match Name'}],
            NumC: [{chk: sumOfNumbers }]
        };

        let boundApi;

        bind();

        function bind(){
            boundApi = ovld.unobtrusive.bind({
                    selector: '#f1 form',
                    rules,

                    // when checking `Name`, rules of `Name1` will also be checked
                    // when checking NumA, rules of NumC will also be checked
                    related: {
                        "Name": ["Name1"],
                        "NumA": ["NumC"],
                        "NumB": ["NumC"],
                    }
                });

            addClass(document.querySelector('body'), 'validating');
        }

        function unbind(){
            boundApi.destroy();
            boundApi = null;
            remClass(document.querySelector('body'), 'validating');
        }

        function toggleBindVld(){
            if(boundApi){
                unbind();
            }
            else{
                bind();
            }
        }

        function validateForm(){
            let res = ovld.unobtrusive.validate({ cont: document.querySelector('#f1'), rules });
            console.log(res);
            var htmlRes = '';

            let count = 0;

            Object.entries(res).forEach(([name, { input, rules }]) => {
                let msg = '';

                if(rules.length){
                    msg = rules[0].msg;
                    count ++;
                }

                htmlRes += `<div>${name} - ${msg}</div>`;
            });

            htmlRes += `<div> error count: ${count}</div>`;
                        
            document.querySelector('#log').innerHTML = htmlRes;
        }

        function noAsdf({v}) {
            return v.indexOf('asdf') !== -1;
        }

        function sameAsName({v, input }) {
            let nameVal = find(input.closest('form'), '[name=Name]')[0].value;
            return v != nameVal;
        }
        
        function sumOfNumbers({v, input}){
            const form = input.closest('form');
            const numA = parseInt(find(form, '[name=NumA]')[0].value, 10);
            const numB = parseInt(find(form, '[name=NumB]')[0].value, 10);

            if (parseInt(v, 10) !== numA + numB){
                return {
                    msg: `${numA} + ${numB} != ${v}`
                };
            }
        }
    </script>
}